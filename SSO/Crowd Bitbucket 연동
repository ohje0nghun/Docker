Atlassian 제품 인증 관련 프로세스 Crowd 연동 관련 정리
*아래 구성은 Saml SSO 기반


  *Crowd Docker Compose 파일

  ---
  version: '3'

services:
  postgres:
    image: postgres:14
    container_name: crowd-postgres
    environment:
      POSTGRES_DB: crowddb
      POSTGRES_USER: devadmin
      POSTGRES_PASSWORD: tkatjdsfmi1!
    volumes:
      - /root/work/crowd/postgres:/var/lib/postgresql/data  # 호스트 경로로 수정
    networks:
      - crowd-network

  crowd:
    image: sfmi-dockerhub.samsungfire.com/crowd:v2
    container_name: atlassian-crowd
    depends_on:
      - postgres
    environment:
      CROWD_DB_URL: "jdbc:postgresql://postgres:5432/crowddb"
      CROWD_DB_USERNAME: "devadmin"
      CROWD_DB_PASSWORD: "tkatjdsfmi1!"
    ports:
      - "19910:8095"
    volumes:
      - /root/work/crowd/data:/var/atlassian/application-data/crowd  # 호스트 경로로 수정
    networks:
      - crowd-network

volumes:
  postgres-data:
  crowd-data:

networks:
  crowd-network:
    driver: bridge
---




테스트 구성 중 에러 사항 정리


- CSRF 관련 에러
아래 에러 발생 시 Crowd 애플리케이션 설정 시 SSO 페이지가 정상적으로 반환되지않음
      
HTTP ERROR 403 - No valid crumb was included in the request 

*조치

1. crowd Docker 이미지 수정
      
 # Crowd의 공식 이미지를 사용합니다.
FROM atlassian/crowd:latest
# Crowd 설정을 위한 환경 변수 설정
ENV CROWD_HOME /var/atlassian/application-data/crowd
# 설정 파일들을 임시 경로로 복사합니다.
COPY crowd.properties /opt/atlassian/crowd/client/conf/crowd.properties
COPY server.xml /tmp/server.xml
# 필요한 포트를 노출합니다.
EXPOSE 8095
# server.xml을 복사하고 Crowd를 시작하는 명령어
CMD ["sh", "-c", "cp /tmp/server.xml /opt/atlassian/crowd/apache-tomcat/conf/server.xml && /opt/atlassian/crowd/apache-tomcat/bin/catalina.sh run"]
     

2. server.xml 파일 및  crowd.properties 파일 수정

*crowd.properties 파일 아래 내용 추가
---      
session.isauthenticated                 session.isauthenticated
session.tokenkey                        session.tokenkey
session.validationinterval              2
session.lastvalidation                  session.lastvalidation

# 추가 설정: XSRF 보호 비활성화
crowd.xsrf.token.validation             false
---


*server.xml 아래 내용 수정
scheme="https"
proxyName="sfmi-crowd.samsungfire.com" // crowd 도메인
 proxyPort="443"


  
3. nginx proxy 관련 설정(예시)
---
server {
    listen 443 ssl;
    server_name sfmi-crowd.samsungfire.com;

    ssl_certificate /etc/nginx/ssl/sfmi-crowd.samsungfire.com.pem;
    ssl_certificate_key /etc/nginx/ssl/sfmi-crowd.samsungfire.com-key.pem;

    location / {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;


  # CORS 설정 추가
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT';
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';

        # CSRF/XSRF 관련 헤더
        proxy_set_header X-CSRF-Token "test";
        proxy_set_header X-Atlassian-Token "no-check";


        proxy_set_header X-Forwarded-Host $host;

        proxy_pass http://192.168.10.9:19910;
    }
}
---
  

4. 서버 /etc/ssl/certs 경로에 openssl로 생성한 내부인증서 파일 이동 후 갱신

cp *.pem /etc/ssl/certs
update-ca-certificates // 갱신 명령어
      
      

5. docker-compose up -d 명령어 실행

  

  
- SSLHandshakeException 관련 에러
Bitbucket과 Crowd 간 HTTPS 연결에서 인증서가 신뢰되지 않기 때문에 발생하는 오류이며 아래 에러 발생 시 Bitbucket에서 Crowd 연동 설정 시 에러반환
      
Connection test failed. Response from the server:
javax.net.ssl.SSLHandshakeException: PKIX path validation failed: java.security.cert.CertPathValidatorException: signature check failed

*조치

1. bitbucket.properties 파일에 아래 내용 추가

---
# XSRF 보호 비활성화
feature.xsrf.disable.checks=true

# CORS 설정
plugin.http.cors.enabled=true
plugin.http.cors.allowed.origins=https://sfmi-bitbucket.samsungfire.com
plugin.http.cors.allowed.methods=GET,POST,PUT,DELETE,OPTIONS
plugin.http.cors.allowed.headers=Content-Type, Authorization, X-Atlassian-Token

# 프록시 설정
server.proxy-port=443
server.proxy-name=yoursub.yourdomain.com
server.scheme=https
---


2. 아래 내용대로 인증서 생성 
  
*Private Key 생성
openssl genrsa -out server.key 2048


*san.cnf 파일을 생성하고 아래 내용을 추가
---
[req]
distinguished_name = req_distinguished_name
req_extensions = v3_req
prompt = no

[req_distinguished_name]
CN = sfmi-crowd.samsungfire.com

[v3_req]
keyUsage = keyEncipherment, dataEncipherment, digitalSignature
extendedKeyUsage = serverAuth, clientAuth
subjectAltName = @alt_names

[alt_names]
DNS.1 = sfmi-crowd.samsungfire.com
---
  
*SAN을 포함한 CSR 생성
openssl req -new -key server.key -out server.csr -config san.cnf

  
*새 인증서 생성
openssl x509 -req -in server.csr -signkey server.key -out server.crt -days 365 -extensions v3_req -extfile san.cnf



  
3. Bitbucket 컨테이너에 접속해서 아래 작업 진행
  
*기존 인증서 삭제 (Keystore 정리)
keytool -delete -alias crowd-cert -keystore /opt/java/openjdk/lib/security/cacerts -storepass changeit

*새로운 인증서 파일 복사  
docker cp /path/to/your/server.crt <bitbucket-container-name>:/opt/atlassian/bitbucket/crowd-cert.crt

*Java Keystore에 새로운 인증서 추가
keytool -import -alias crowd-cert -file /opt/atlassian/bitbucket/crowd-cert.crt -keystore /opt/java/openjdk/lib/security/cacerts -storepass changeit

*인증서 추가 확인
keytool -list -v -keystore /opt/java/openjdk/lib/security/cacerts -storepass changeit

컨테이너 재실행
  






